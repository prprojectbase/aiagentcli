<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 50%, #7e22ce 100%);
            font-family: Arial, sans-serif;
        }
        .game-container {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }
        canvas {
            border: 3px solid #fff;
            background-color: #000;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);
        }
        .score {
            color: #fff;
            font-size: 28px;
            margin: 20px 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        .controls {
            color: #fff;
            margin-top: 20px;
        }
        button {
            background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            margin: 0 10px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }
        button:active {
            transform: translateY(0);
        }
        h1 {
            color: #fff;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            margin-bottom: 10px;
        }
        .game-over {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            display: none;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>üêç Snake Game</h1>
        <div class="score">Score: <span id="score">0</span></div>
        <canvas id="gameCanvas" width="400" height="400"></canvas>
        <div class="controls">
            <p>Use arrow keys to control the snake</p>
            <button onclick="startGame()">Start Game</button>
            <button onclick="pauseGame()">Pause</button>
            <button onclick="resetGame()">Reset</button>
        </div>
    </div>

    <div class="game-over" id="gameOver">
        <h2>Game Over!</h2>
        <p>Final Score: <span id="finalScore">0</span></p>
        <button onclick="resetGame()">Play Again</button>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const gameOverElement = document.getElementById('gameOver');
        const finalScoreElement = document.getElementById('finalScore');

        let snake = [{x: 200, y: 200}];
        let direction = {x: 0, y: 0};
        let food = {x: 0, y: 0};
        let score = 0;
        let gameRunning = false;
        let gamePaused = false;
        let gameLoop;

        function generateFood() {
            food.x = Math.floor(Math.random() * 20) * 20;
            food.y = Math.floor(Math.random() * 20) * 20;
            
            // Make sure food doesn't spawn on snake
            while (snake.some(segment => segment.x === food.x && segment.y === food.y)) {
                food.x = Math.floor(Math.random() * 20) * 20;
                food.y = Math.floor(Math.random() * 20) * 20;
            }
        }

        function drawGame() {
            // Clear canvas
            ctx.fillStyle = '#000';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw snake
            ctx.fillStyle = '#0f0';
            snake.forEach((segment, index) => {
                if (index === 0) {
                    // Snake head - brighter green
                    ctx.fillStyle = '#0f0';
                } else {
                    // Snake body - darker green gradient
                    ctx.fillStyle = `hsl(120, 100%, ${50 + (index / snake.length) * 30}%)`;
                }
                ctx.fillRect(segment.x, segment.y, 18, 18);
                
                // Add border to snake segments
                ctx.strokeStyle = '#090';
                ctx.lineWidth = 1;
                ctx.strokeRect(segment.x, segment.y, 18, 18);
            });

            // Draw food
            ctx.fillStyle = '#f00';
            ctx.fillRect(food.x, food.y, 18, 18);
            
            // Add glow effect to food
            ctx.shadowColor = '#f00';
            ctx.shadowBlur = 10;
            ctx.fillRect(food.x, food.y, 18, 18);
            ctx.shadowBlur = 0;
        }

        function updateGame() {
            if (!gameRunning || gamePaused) return;

            // Move snake head
            const head = {x: snake[0].x + direction.x, y: snake[0].y + direction.y};

            // Check wall collision
            if (head.x < 0 || head.x >= canvas.width || head.y < 0 || head.y >= canvas.height) {
                gameOver();
                return;
            }

            // Check self collision
            if (snake.some(segment => segment.x === head.x && segment.y === head.y)) {
                gameOver();
                return;
            }

            snake.unshift(head);

            // Check food collision
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                scoreElement.textContent = score;
                generateFood();
                
                // Add visual feedback
                canvas.style.transform = 'scale(1.05)';
                setTimeout(() => {
                    canvas.style.transform = 'scale(1)';
                }, 100);
            } else {
                snake.pop();
            }

            drawGame();
        }

        function gameOver() {
            gameRunning = false;
            clearInterval(gameLoop);
            finalScoreElement.textContent = score;
            gameOverElement.style.display = 'block';
        }

        function startGame() {
            if (gameRunning) return;
            
            snake = [{x: 200, y: 200}];
            direction = {x: 20, y: 0};
            score = 0;
            scoreElement.textContent = score;
            gameRunning = true;
            gamePaused = false;
            gameOverElement.style.display = 'none';
            generateFood();
            drawGame();
            
            // Start game loop
            gameLoop = setInterval(updateGame, 150);
        }

        function pauseGame() {
            if (!gameRunning) return;
            
            gamePaused = !gamePaused;
            
            if (gamePaused) {
                clearInterval(gameLoop);
            } else {
                gameLoop = setInterval(updateGame, 150);
            }
        }

        function resetGame() {
            gameRunning = false;
            gamePaused = false;
            clearInterval(gameLoop);
            snake = [{x: 200, y: 200}];
            direction = {x: 0, y: 0};
            score = 0;
            scoreElement.textContent = score;
            gameOverElement.style.display = 'none';
            generateFood();
            drawGame();
        }

        // Keyboard controls
        document.addEventListener('keydown', (e) => {
            if (!gameRunning || gamePaused) return;

            switch(e.key) {
                case 'ArrowUp':
                    if (direction.y === 0) {
                        direction = {x: 0, y: -20};
                    }
                    break;
                case 'ArrowDown':
                    if (direction.y === 0) {
                        direction = {x: 0, y: 20};
                    }
                    break;
                case 'ArrowLeft':
                    if (direction.x === 0) {
                        direction = {x: -20, y: 0};
                    }
                    break;
                case 'ArrowRight':
                    if (direction.x === 0) {
                        direction = {x: 20, y: 0};
                    }
                    break;
                case ' ':
                    pauseGame();
                    break;
            }
        });

        // Add smooth transitions
        canvas.style.transition = 'transform 0.1s ease';

        // Initial setup
        generateFood();
        drawGame();
        
        // Add touch controls for mobile
        let touchStartX = 0;
        let touchStartY = 0;
        
        canvas.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        });
        
        canvas.addEventListener('touchend', (e) => {
            if (!gameRunning || gamePaused) return;
            
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;
            
            const deltaX = touchEndX - touchStartX;
            const deltaY = touchEndY - touchStartY;
            
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                // Horizontal swipe
                if (deltaX > 0 && direction.x === 0) {
                    direction = {x: 20, y: 0};
                } else if (deltaX < 0 && direction.x === 0) {
                    direction = {x: -20, y: 0};
                }
            } else {
                // Vertical swipe
                if (deltaY > 0 && direction.y === 0) {
                    direction = {x: 0, y: 20};
                } else if (deltaY < 0 && direction.y === 0) {
                    direction = {x: 0, y: -20};
                }
            }
        });
    </script>
</body>
</html>